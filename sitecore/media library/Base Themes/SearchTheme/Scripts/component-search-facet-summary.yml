---
ID: "a127529e-86e7-4a90-bc89-3bfc7e5fd797"
Parent: "dfcbfa5a-2e37-418a-adb7-f411ecae89a9"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: "/sitecore/media library/Base Themes/SearchTheme/Scripts/component-search-facet-summary"
DB: master
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/A127529E86E74A90BC893BFC7E5FD797.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  Value: DQovKioNCiAqIEZhY2V0IHN1bW1hcnkgY29tcG9uZW50IGZ1bmN0aW9uYWxpdHkNCiAqIEBtb2R1bGUgZmFjZXRTdW1tYXJ5DQogKiBAcGFyYW0gIHtqUXVlcnl9ICQgSW5zdGFuY2Ugb2YgalF1ZXJ5DQogKiBAcGFyYW0gIHtEb2N1bWVudH0gZG9jdW1lbnQgZG9tIGRvY3VtZW50IG9iamVjdA0KICogQHJldHVybiB7T2JqZWN0fSBsaXN0IG9mIG1ldGhvZHMgZm9yIHdvcmtpbmcgd2l0aCBjb21wb25lbnQgZmFjZXQgc3VtbWFyeQ0KKi8NClhBLmNvbXBvbmVudC5zZWFyY2guZmFjZXQuc3VtbWFyeSA9IChmdW5jdGlvbiAoJCwgZG9jdW1lbnQpIHsNCiAgICAvKioNCiAgICAqIFRoaXMgb2JqZWN0IHN0b3JlcyBhbGwgcHVibGljIGFwaSBtZXRob2RzDQogICAgKiBAdHlwZSB7T2JqZWN0LjxNZXRob2RzPn0NCiAgICAqIEBtZW1iZXJPZiBtb2R1bGU6ZmFjZXRTdW1tYXJ5DQogICAgKi8NCiAgICB2YXIgYXBpID0ge30sDQogICAgICAgIHVybEhlbHBlck1vZGVsID0gWEEuY29tcG9uZW50LnNlYXJjaC51cmwsDQogICAgICAgIHF1ZXJ5TW9kZWwgPSBYQS5jb21wb25lbnQuc2VhcmNoLnF1ZXJ5LA0KICAgICAgICBhcGlNb2RlbCA9IFhBLmNvbXBvbmVudC5zZWFyY2guYWpheCwNCiAgICAgICAgZmFjZXROYW1lID0gInN1bW1hcnkiOw0KDQogICAgLyoqDQogICAgKiBAbmFtZSBtb2R1bGU6ZmFjZXRTdW1tYXJ5LkZhY2V0U3VtbWFyeU1vZGVsDQogICAgKiBAY29uc3RydWN0b3INCiAgICAqIEBhdWdtZW50cyBCYWNrYm9uZS5Nb2RlbA0KICAgICovDQogICAgdmFyIEZhY2V0U3VtbWFyeU1vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKA0KICAgICAgICAvKiogQGxlbmRzIG1vZHVsZTpmYWNldFN1bW1hcnkuRmFjZXRTdW1tYXJ5TW9kZWwucHJvdG90eXBlICoqLw0KDQogICAgICAgIHsNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgKiBEZWZhdWx0IG1vZGVsIG9wdGlvbnMNCiAgICAgICAgICAgICogQGRlZmF1bHQNCiAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgcHJvcGVydGllcyBvZiBhamF4IGNhbGwgYW5kIGNhbGxiYWNrDQogICAgICAgICAgICAqLw0KICAgICAgICAgICAgZGVmYXVsdHM6IHsNCiAgICAgICAgICAgICAgICBkYXRhUHJvcGVydGllczoge30sDQogICAgICAgICAgICAgICAgc2lnOiBbXSwNCiAgICAgICAgICAgICAgICBoYXNoOiAnJw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAqIExpc3RlbnMgdG8gY2hhbmdlcyBvbiBmYWNldHMgYW5kIGhhc2gNCiAgICAgICAgICAgICogQGxpc3RlbnMgbW9kdWxlOlhBLmNvbXBvbmVudC5zZWFyY2gudmVudH5ldmVudDpmYWNldC1kYXRhLWxvYWRlZA0KICAgICAgICAgICAgKiBAbGlzdGVucyBtb2R1bGU6WEEuY29tcG9uZW50LnNlYXJjaC52ZW50fmV2ZW50OmZhY2V0LWRhdGEtZmlsdGVyZWQNCiAgICAgICAgICAgICogQGxpc3RlbnMgbW9kdWxlOlhBLmNvbXBvbmVudC5zZWFyY2gudmVudH5ldmVudDpmYWNldC1kYXRhLXBhcnRpYWwtZmlsdGVyZWQNCiAgICAgICAgICAgICogQGxpc3RlbnMgbW9kdWxlOlhBLmNvbXBvbmVudC5zZWFyY2gudmVudH5ldmVudDpoYXNoQ2hhbmdlZA0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7DQogICAgICAgICAgICAgICAgdGhpcy5zZXQoJ3Jlc3VsdERhdGEnLCB7fSkNCiAgICAgICAgICAgICAgICAvL0V2ZW50IHRvIGdldCBkYXRhIGF0IHRoZSBiZWdpbmluZyBvciBpbiBjYXNlIHRoYXQgdGhlcmUgYXJlIG5vIGhhc2ggcGFyYW1ldGVycyBpbiB0aGUgdXJsIC0gb25lIHJlcXVlc3QgZm9yIGFsbCBjb250cm9scw0KICAgICAgICAgICAgICAgIFhBLmNvbXBvbmVudC5zZWFyY2gudmVudC5vbigiZmFjZXQtZGF0YS1sb2FkZWQiLCB0aGF0LnByb2Nlc3NEYXRhLmJpbmQodGhhdCkpOw0KICAgICAgICAgICAgICAgIC8vIC8vSWYgdGhlIHVybCBoYXNoIGNvbnRhaW5zIHRoaXMgY29udHJvbCBmYWNldCBuYW1lIChzb21lb25lIGNsaWNrZWQgdGhpcyBjb250cm9sKSwgdGhlbiB3ZSBoYXZlIHRvIGxpc3RlbiBmb3IgcGFydGlhbCBmaWx0ZXJpbmcNCiAgICAgICAgICAgICAgICBYQS5jb21wb25lbnQuc2VhcmNoLnZlbnQub24oImZhY2V0LWRhdGEtcGFydGlhbC1maWx0ZXJlZCIsIHRoYXQucHJvY2Vzc0RhdGEuYmluZCh0aGF0KSk7DQogICAgICAgICAgICAgICAgLy8gLy9XaGVuIHdlIGFyZSBub3QgZmlsdGVyaW5nIGJ5IHRoaXMgY29udHJvbCAobm90IGNsaWNrZWQpDQogICAgICAgICAgICAgICAgWEEuY29tcG9uZW50LnNlYXJjaC52ZW50Lm9uKCJmYWNldC1kYXRhLWZpbHRlcmVkIiwgdGhhdC5wcm9jZXNzRGF0YS5iaW5kKHRoYXQpKTsNCg0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgICogRmluZHMgYWxsIGZhY2V0cyB0aGF0IGhhdmUgc2FtZSBuYW1lIGFzIGZhY2V0TmFtZSBpbiBDb250cm9sIERhdGEgYW5kIHJldHVybiB0aGVtDQogICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZmFjZXREYXRhIA0KICAgICAgICAgICAgICogQHBhcmFtIHsqfSBjb250cm9sRGF0YSANCiAgICAgICAgICAgICAqIEByZXR1cm5zIHtBcnJheX0gRmlsdGVyZWQgZmFjZXQgZGF0YQ0KICAgICAgICAgICAgICogQG1lbWJlcm9mIG1vZHVsZTpmYWNldFN1bW1hcnkuRmFjZXRTdW1tYXJ5TW9kZWwNCiAgICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRTdW1tYXJ5LkZhY2V0U3VtbWFyeU1vZGVsLnJlcXVlc3RGYWNldERhdGENCiAgICAgICAgICAgICAqLw0KICAgICAgICAgICAgcmVxdWVzdEZhY2V0RGF0YTogZnVuY3Rpb24gKGZhY2V0RGF0YSwgY29udHJvbERhdGEpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gXy5maW5kKGZhY2V0RGF0YSwgZnVuY3Rpb24gKGYpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYuS2V5LnRvTG93ZXJDYXNlKCkgPT09IGNvbnRyb2xEYXRhLmZhY2V0TmFtZS50b0xvd2VyQ2FzZSgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KCQkJICogQ29uY2F0ZW5hdGVzIHNpZ25hdHVyZSBhbmQgZmFjZXQgbmFtZSBpbiBvcmRlciB0byBidWlsZCBwcm9wZXIgaGFzaCBwYXJhbWV0ZXIgbmFtZQ0KCQkJICogQHBhcmFtIHsqfSByYXdTaWduYXR1cmUgDQoJCQkgKiBAcGFyYW0geyp9IGYgDQoJCQkgKi8NCiAgICAgICAgICAgIHRyYW5zbGF0ZVNpZ25hdHVyZXM6IGZ1bmN0aW9uIChyYXdTaWduYXR1cmUsIGYpIHsNCiAgICAgICAgICAgICAgICB2YXIgc2lnbmF0dXJlcywgaTsNCg0KICAgICAgICAgICAgICAgIGYgPSBmLnRvTG93ZXJDYXNlKCk7DQoNCiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJhd1NpZ25hdHVyZSA9PT0gInVuZGVmaW5lZCIgfHwgcmF3U2lnbmF0dXJlID09PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBbZl07DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgc2lnbmF0dXJlcyA9IHJhd1NpZ25hdHVyZS5zcGxpdCgnLCcpOw0KDQogICAgICAgICAgICAgICAgaWYgKHJhd1NpZ25hdHVyZSA9PT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmXTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2lnbmF0dXJlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlc1tpXSA9IHNpZ25hdHVyZXNbaV0gKyAiXyIgKyBmOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduYXR1cmVzOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAvKioNCiAgICAgICAgICAgICogUHJvY2Vzc2VzIGRhdGEgdGhhdCBjb21lcyBhcyBwYXJhbWV0ZXIuIFVwZGF0ZQ0KICAgICAgICAgICAgKiBtb2RlbCBhbmQgc3RvcmUgYWxsIGZhY2V0cyB0aGF0IGFyZSBhY3RpdmUgYW5kIGhhdmUNCiAgICAgICAgICAgICogc2FtZSBzaWduYXR1cmUNCiAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgRGF0YSBmcm9tIHNlcnZlciB3aXRoIGZhY2V0IHZhbHVlcw0KICAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlNb2RlbA0KICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlNb2RlbC5wcm9jZXNzRGF0YQ0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIHByb2Nlc3NEYXRhOiBmdW5jdGlvbiAoZGF0YSkgew0KICAgICAgICAgICAgICAgIHZhciBoYXNoT2JqID0gcXVlcnlNb2RlbC5wYXJzZUhhc2hQYXJhbWV0ZXJzKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSwNCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEZhY2VkRGF0YSwNCiAgICAgICAgICAgICAgICAgICAgdGhhdCA9IHRoaXMsDQogICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lLA0KICAgICAgICAgICAgICAgICAgICBmYWNldERhdGEgPSBbXSwgcmVxdWVzdERhdGEgPSB7fSwgZmFjZXRDb250cm9sLCBjb250cm9sOw0KICAgICAgICAgICAgICAgIHZhciBmYWNldHMgPSBYQS5jb21wb25lbnQuc2VhcmNoLmZhY2V0Ow0KDQogICAgICAgICAgICAgICAgZm9yIChmYWNldENvbnRyb2wgaW4gZmFjZXRzKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRyb2wgPSBYQS5jb21wb25lbnQuc2VhcmNoLmZhY2V0W2ZhY2V0Q29udHJvbF07DQogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGNvbnRyb2wuZ2V0RmFjZXREYXRhUmVxdWVzdEluZm8pID09PSAiZnVuY3Rpb24iKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBmYWNldERhdGEgPSBjb250cm9sLmdldEZhY2V0RGF0YVJlcXVlc3RJbmZvKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmYWNldEluZGV4ID0gMDsgZmFjZXRJbmRleCA8IGZhY2V0RGF0YS5sZW5ndGg7IGZhY2V0SW5kZXgrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9sRGF0YSA9IGZhY2V0RGF0YVtmYWNldEluZGV4XTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2lnbmF0dXJlc0FycmF5ID0gY29udHJvbERhdGEuc2lnbmF0dXJlLnNwbGl0KCcsJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc2lnbmF0dXJlSW5kZXggPSAwOyBzaWduYXR1cmVJbmRleCA8IHNpZ25hdHVyZXNBcnJheS5sZW5ndGg7IHNpZ25hdHVyZUluZGV4KyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpZ25hdHVyZSA9IHNpZ25hdHVyZXNBcnJheVtzaWduYXR1cmVJbmRleF07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLlNpZ25hdHVyZSA9PSBzaWduYXR1cmUgJiYgdGhhdC5nZXQoJ3NpZycpID09IHNpZ25hdHVyZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEZhY2VkRGF0YSA9IHRoYXQucmVxdWVzdEZhY2V0RGF0YShkYXRhLkZhY2V0cywgY29udHJvbERhdGEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RmFjZWREYXRhICE9PSAidW5kZWZpbmVkIikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lID0gcmVxdWVzdEZhY2VkRGF0YS5OYW1lOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyUmVzdWx0cyA9IHRoaXMuZ2V0KCdyZXN1bHREYXRhJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhY2V0SGFzaE5hbWVzID0gdGhhdC50cmFuc2xhdGVTaWduYXR1cmVzKHNpZ25hdHVyZSwgcmVxdWVzdEZhY2VkRGF0YS5LZXkudG9Mb3dlckNhc2UoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmYWNldEhhc2hOYW1lSW5kZXggPSAwOyBmYWNldEhhc2hOYW1lSW5kZXggPCBmYWNldEhhc2hOYW1lcy5sZW5ndGg7IGZhY2V0SGFzaE5hbWVJbmRleCsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYWNldEhhc2hOYW1lID0gZmFjZXRIYXNoTmFtZXNbZmFjZXRIYXNoTmFtZUluZGV4XTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc2hPYmpbZmFjZXRIYXNoTmFtZV0pIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJSZXN1bHRzW2Rpc3BsYXlOYW1lXSA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiBoYXNoT2JqW2ZhY2V0SGFzaE5hbWVdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJrZXkiOiByZXF1ZXN0RmFjZWREYXRhLktleSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2lnbmF0dXJlIjogZGF0YS5TaWduYXR1cmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZhY2V0SGFzaE5hbWUiOiBmYWNldEhhc2hOYW1lDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY3VyclJlc3VsdHNbZGlzcGxheU5hbWVdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdyZXN1bHREYXRhJywgY3VyclJlc3VsdHMpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcykNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIC8qKg0KICAgICogQG5hbWUgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlWaWV3DQogICAgKiBAY29uc3RydWN0b3INCiAgICAqIEBhdWdtZW50cyBCYWNrYm9uZS5WaWV3DQogICAgKi8NCiAgICB2YXIgRmFjZXRTdW1tYXJ5VmlldyA9IFhBLmNvbXBvbmVudC5zZWFyY2guYmFzZVZpZXcuZXh0ZW5kKA0KICAgICAgICAvKiogQGxlbmRzIG1vZHVsZTpmYWNldFN1bW1hcnkuRmFjZXRTdW1tYXJ5Vmlldy5wcm90b3R5cGUgKiovDQoNCiAgICAgICAgew0KICAgICAgICAgICAgdGFnTmFtZTogImRpdiIsDQogICAgICAgICAgICBjbGFzc05hbWU6ICJmYWNldC1zZWFyY2gtc3VtbWFyeSIsDQogICAgICAgICAgICB0ZW1wbGF0ZToNCiAgICAgICAgICAgICAgICAiPCUgaWYoT2JqZWN0LmtleXMocmVzdWx0RGF0YSkubGVuZ3RoKXsgJT4gPGRpdiBjbGFzcz0nZmFjZXQtc3VtbWFyeS13cmFwcGVyIGNsZWFyZml4Jz4iICsNCiAgICAgICAgICAgICAgICAiPCUgXy5mb3JFYWNoKHJlc3VsdERhdGEsIGZ1bmN0aW9uKG9iaixrZXkpeyAlPiIgKw0KICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdhY3RpdmUtZmFjZXQtc3VtbWFyeS1lbGVtZW50JyBkYXRhLWhhc2g9JyIgKyAiPCU9b2JqLmZhY2V0SGFzaE5hbWUlPiIgKyAiJyBkYXRhLWtleT0nIiArICI8JT1vYmoua2V5JT4iICsgIicgZGF0YS1zaWduYXR1cmU9JyIgKyAiPCU9b2JqLnNpZ25hdHVyZSU+IiArICInPiIgKw0KICAgICAgICAgICAgICAgICI8c3BhbiBjbGFzcz0nZmFjZXQtc3VtbWFyeS1uYW1lJz48JT0ga2V5ICAlPjo8L3NwYW4+ICIgKyAiPCU9IHJlbmRlckZhY2V0VmFsdWVzKG9iai52YWx1ZSkgJT4iICsNCiAgICAgICAgICAgICAgICAiPC9kaXY+IiArDQogICAgICAgICAgICAgICAgIjwlIH0pOyAlPiIgKw0KICAgICAgICAgICAgICAgICI8L2Rpdj48JSB9JT4iLA0KDQogICAgICAgICAgICByZW5kZXJGYWNldFZhbHVlczogZnVuY3Rpb24gKHZhbHVlKSB7DQogICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHZhbHVlLnNwbGl0KCJ8fCIpDQoNCiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1zLm1hcChmdW5jdGlvbiAocCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cJ2ZhY2V0LXN1bW1hcnktdmFsdWVcJyBkYXRhLXZhbHVlPScgKyBlbmNvZGVVUklDb21wb25lbnQocCkgKyAnPicNCiAgICAgICAgICAgICAgICAgICAgICAgICsgJzxwPicgKyBwICsgJzwvcD4nDQogICAgICAgICAgICAgICAgICAgICAgICArICc8c3BhbiBjbGFzcz1cJ3JlbW92ZUZhY2V0VmFsdWVcJz54PC9zcGFuPicNCiAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvZGl2PicNCg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7DQogICAgICAgICAgICAgICAgfSkuam9pbignICcpDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgLyoqDQogICAgICAgICAgICAqIEluaXRpYWxseSBzZXRzIGRhdGEgdG8gbW9kZWwgYW5kIHdhdGNoZXMgZXZlbnRzIG9uIHdoaWNoDQogICAgICAgICAgICAqIHZpZXcgc2hvdWxkIGJlIHVwZGF0ZWQNCiAgICAgICAgICAgICogQGxpc3RlbnMgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlWaWV3fmV2ZW50OmNoYW5nZQ0KICAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlWaWV3DQogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRTdW1tYXJ5LkZhY2V0U3VtbWFyeVZpZXcjaW5pdGlhbGl6ZQ0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGNsZWFyQnV0dG9uczogZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgdmFyICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLA0KICAgICAgICAgICAgICAgICAgICAkZmFjZXRTdW1tYXJ5ID0gJHRhcmdldC5jbG9zZXN0KCIuZmFjZXQtc3VtbWFyeSIpOw0KICAgICAgICAgICAgICAgICRmYWNldFN1bW1hcnkuZmluZCgnLmNsZWFyLWFsbC1hY3RpdmUtZmFjZXRzJykudHJpZ2dlcignY2xpY2snKTsNCg0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgKiBJbml0aWFsaXplcyB0aGUgdmlldyBieSBhc3NpZ25pbmcgZXZlbnRzIHRvIHRoZSBidXR0b25zIGFuZCByZW5kZXJpbmcgY29tcG9uZW50DQogICAgICAgICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZmFjZXRTdW1tYXJ5LkZhY2V0U3VtbWFyeVZpZXcNCiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpmYWNldFN1bW1hcnkuRmFjZXRTdW1tYXJ5VmlldyNldmVudHMNCiAgICAgICAgICAgICovDQogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdmFyIGRhdGFQcm9wZXJ0aWVzID0gdGhpcy4kZWwuZGF0YSgpLA0KICAgICAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcywNCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IGRhdGFQcm9wZXJ0aWVzLnByb3BlcnRpZXMsDQogICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZXM7DQogICAgICAgICAgICAgICAgQmFja2JvbmUuJCgnLmZhY2V0LXN1bW1hcnkgLmNsZWFyLWZpbHRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgICAgICAgICB0aGF0LmNsZWFyQnV0dG9ucyhldmVudCkNCg0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgQmFja2JvbmUuJCgnLmZhY2V0LXN1bW1hcnkgLmJvdHRvbS1yZW1vdmUtZmlsdGVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgICAgIHRoYXQuY2xlYXJCdXR0b25zKGV2ZW50KQ0KDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICBzaWduYXR1cmVzID0gdGhpcy50cmFuc2xhdGVTaWduYXR1cmVzKHByb3BlcnRpZXMuc2VhcmNoUmVzdWx0c1NpZ25hdHVyZSwgZmFjZXROYW1lKTsNCiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCgic2lnIiwgcHJvcGVydGllcy5zZWFyY2hSZXN1bHRzU2lnbmF0dXJlKTsNCiAgICAgICAgICAgICAgICBkYXRhUHJvcGVydGllcyA9IHRoaXMuJGVsLmRhdGEoInByb3BlcnRpZXMiKSwNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbigiY2hhbmdlIiwgdGhpcy5yZW5kZXIsIHRoaXMpOw0KICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgLyoqDQogICAgICAgICAgICAgKiBsaXN0IG9mIGV2ZW50cyBmb3IgQmFja2JvbmUgVmlldw0KICAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlWaWV3DQogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRTdW1tYXJ5LkZhY2V0U3VtbWFyeVZpZXcjZXZlbnRzDQogICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGV2ZW50czogew0KICAgICAgICAgICAgICAgICdjbGljayAucmVtb3ZlRmFjZXRWYWx1ZSc6ICdyZW1vdmVGYWNldFZhbHVlJywNCiAgICAgICAgICAgICAgICAnY2xpY2sgLmNsZWFyLWZpbHRlcic6ICdjbGVhckFsbEFjdGl2ZUZhY2V0cycsDQogICAgICAgICAgICAgICAgJ2NsaWNrIC5ib3R0b20tcmVtb3ZlLWZpbHRlciBidXR0b24nOiAnY2xlYXJBbGxBY3RpdmVGYWNldHMnDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgLyoqDQogICAgICAgICAgICAqIFByZXBhcmVzIGhhc2ggc3RyaW5nIGJhc2VkIG9uIGhhc2ggb2JqZWN0DQogICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoT2JqIE9iamVjdCBjcmVhdGVkIGZyb20gaGFzaCBwYXJhbWV0ZXJzDQogICAgICAgICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZmFjZXRTdW1tYXJ5LkZhY2V0U3VtbWFyeVZpZXcNCiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpmYWNldFN1bW1hcnkuRmFjZXRTdW1tYXJ5VmlldyNjcmVhdGVIYXNoDQogICAgICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IGhhc2ggYXMgYSBzdHJpbmcNCiAgICAgICAgICAgICovDQogICAgICAgICAgICBjcmVhdGVIYXNoOiBmdW5jdGlvbiAoaGFzaE9iaikgew0KICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAiIyI7DQogICAgICAgICAgICAgICAgZm9yIChvcHRpb24gaW4gaGFzaE9iaikgew0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gb3B0aW9uICsgIj0iICsgaGFzaE9ialtvcHRpb25dICsgIiYiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgICogVXBkYXRlcyBjdXJyZW50IGxvY2F0aW9uDQogICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaE9iaiANCiAgICAgICAgICAgICAqLw0KICAgICAgICAgICAgdXBkYXRlTG9jYXRpb246IGZ1bmN0aW9uIChoYXNoT2JqKSB7DQogICAgICAgICAgICAgICAgWEEuY29tcG9uZW50LnNlYXJjaC5xdWVyeS51cGRhdGVIYXNoKGhhc2hPYmopOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgICogUmV0dXJucyBmYWNldCBwYXJhbXMNCiAgICAgICAgICAgICAqIEBwYXJhbSB7SnF1ZXJ5fSBlbCBqcXVlcnkgZXZlbnQgdGFyZ2V0IGVsZW1lbnQgDQogICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGdldEZhY2V0UGFyYW1zOiBmdW5jdGlvbiAoZWwpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3VtbWFyeUVsID0gJChlbCkuY2xvc2VzdCgiLmFjdGl2ZS1mYWNldC1zdW1tYXJ5LWVsZW1lbnQiKTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgICAgIGtleTogc3VtbWFyeUVsLmRhdGEoJ2tleScpLA0KICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IHN1bW1hcnlFbC5kYXRhKCdzaWduYXR1cmUnKQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAvKioNCiAgICAgICAgICAgICAqIENsZWFycyBhbGwgYWN0aXZlIGZhY2V0cyB0aGF0IGFyZSBzdG9yZWQgdW5kZXIgc3VtbWFyeSBjb21wb25lbnQNCiAgICAgICAgICAgICogQG1lbWJlcm9mIG1vZHVsZTpmYWNldFN1bW1hcnkuRmFjZXRTdW1tYXJ5Vmlldw0KICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlWaWV3I2NsZWFyQWxsQWN0aXZlRmFjZXRzDQogICAgICAgICAgICAqLw0KICAgICAgICAgICAgY2xlYXJBbGxBY3RpdmVGYWNldHM6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7DQogICAgICAgICAgICAgICAgdmFyIGhhc2hPYmogPSBxdWVyeU1vZGVsLnBhcnNlSGFzaFBhcmFtZXRlcnMod2luZG93LmxvY2F0aW9uLmhhc2gpOw0KICAgICAgICAgICAgICAgIA0KCQkJCXRoaXMuJGVsLmZpbmQoJy5hY3RpdmUtZmFjZXQtc3VtbWFyeS1lbGVtZW50JykuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBmYWNldFBhcmFtcyA9IHNlbGYuZ2V0RmFjZXRQYXJhbXMoJCh0aGlzKSk7DQogICAgICAgICAgICAgICAgICAgIHZhciBmYWNldEhhc2hOYW1lcyA9IHNlbGYudHJhbnNsYXRlU2lnbmF0dXJlcyhmYWNldFBhcmFtcy5zaWduYXR1cmUsIGZhY2V0UGFyYW1zLmtleSkNCg0KICAgICAgICAgICAgICAgICAgICBfLmVhY2goZmFjZXRIYXNoTmFtZXMsIGZ1bmN0aW9uIChmYWNldEhhc2hOYW1lKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBoYXNoT2JqW2ZhY2V0SGFzaE5hbWVdPSIiOw0KICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgIH0pDQoNCiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUxvY2F0aW9uKGhhc2hPYmopOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgICogUmVtb3ZlcyBzZWxlY3RlZCBmYWNldCB2YWx1ZSBhbmQgdXBkYXRlcyBoYXNoDQogICAgICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBFdmVudCBvYmplY3Qgd2hlcmUgc3RvcmVkIGNsaWNrZWQgZWxlbWVudA0KICAgICAgICAgICAgICovDQogICAgICAgICAgICByZW1vdmVGYWNldFZhbHVlOiBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgICAgICB2YXIgZmFjZXRWYWx1ZUVsZW0gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoIi5mYWNldC1zdW1tYXJ5LXZhbHVlIikNCg0KICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZEZhY2V0VmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoZmFjZXRWYWx1ZUVsZW0uZGF0YSgndmFsdWUnKSkNCiAgICAgICAgICAgICAgICB2YXIgZmFjZXRQYXJhbXMgPSB0aGlzLmdldEZhY2V0UGFyYW1zKGV2ZW50LmN1cnJlbnRUYXJnZXQpDQoNCiAgICAgICAgICAgICAgICB2YXIgaGFzaE9iaiA9IHF1ZXJ5TW9kZWwucGFyc2VIYXNoUGFyYW1ldGVycyh3aW5kb3cubG9jYXRpb24uaGFzaCk7DQogICAgICAgICAgICAgICAgdmFyIGZhY2V0SGFzaE5hbWVzID0gdGhpcy50cmFuc2xhdGVTaWduYXR1cmVzKGZhY2V0UGFyYW1zLnNpZ25hdHVyZSwgZmFjZXRQYXJhbXMua2V5KQ0KDQogICAgICAgICAgICAgICAgdmFyIHJlbW92ZVNlbGVjdGVkVmFsdWUgPSBmdW5jdGlvbiAoZmFjZXRIYXNoTmFtZSkgew0KICAgICAgICAgICAgICAgICAgICBoYXNoT2JqW2ZhY2V0SGFzaE5hbWVdID0gaGFzaE9ialtmYWNldEhhc2hOYW1lXQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCJ8fCIpDQogICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKHZhbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwgIT09IHNlbGVjdGVkRmFjZXRWYWx1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCJ8fCIpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIF8uZWFjaChmYWNldEhhc2hOYW1lcywgcmVtb3ZlU2VsZWN0ZWRWYWx1ZSkNCg0KICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTG9jYXRpb24oaGFzaE9iaik7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgLyoqDQogICAgICAgICAgICAqIFJlbmRlcnMgdmlldw0KICAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlWaWV3DQogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRTdW1tYXJ5LkZhY2V0U3VtbWFyeVZpZXcjcmVuZGVyDQogICAgICAgICAgICAqLw0KICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdmFyIGluc3QgPSB0aGlzLA0KICAgICAgICAgICAgICAgICAgICByZXN1bHREYXRhID0gdGhpcy5tb2RlbC5nZXQoInJlc3VsdERhdGEiKSwNCiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUsIHRlbXBsYXRlUmVzdWx0Ow0KICAgICAgICAgICAgICAgIHZhciBkYXRhUHJvcGVydGllcyA9IHRoaXMuJGVsLmRhdGEoKTsNCiAgICAgICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBkYXRhUHJvcGVydGllcy5wcm9wZXJ0aWVzOw0KICAgICAgICAgICAgICAgIHRoaXMubWFuYWdlVmlzaWJpbGl0eUJ5RGF0YSh0aGlzLiRlbCwgcmVzdWx0RGF0YSkNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlbCkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCh7IGRhdGFQcm9wZXJ0aWVzOiB0aGlzLnByb3BlcnRpZXMgfSk7DQogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KCJzaWciLCB0aGlzLnByb3BlcnRpZXMuc2VhcmNoUmVzdWx0c1NpZ25hdHVyZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vY2hlY2tzIHdoZXRoZXIgcGFnZSBpcyBvcGVuZWQgZnJvbSBkaXNjIC0gaWYgeWVzIHRoZW4gd2UgYXJlIGluIENyZWF0aXZlIEV4Y2hhbmdlIG1vZGUNCiAgICAgICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuc3RhcnRzV2l0aCgiZmlsZTovLyIpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAocmVzdWx0RGF0YSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gXy50ZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnRzOiB7IHJlbmRlckZhY2V0VmFsdWVzOiB0aGlzLnJlbmRlckZhY2V0VmFsdWVzIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVSZXN1bHQgPSB0ZW1wbGF0ZSh7DQogICAgICAgICAgICAgICAgICAgICAgICAicmVzdWx0RGF0YSI6IHJlc3VsdERhdGENCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaW5zdC4kZWwuZmluZCgiLmZhY2V0LXN1bW1hcnktcGxhY2Vob2xkZXIiKS5odG1sKHRlbXBsYXRlUmVzdWx0KTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICB9KTsNCiAgICAvKioNCiAgICAqIEZvciBlYWNoIHNlYXJjaCBkcm9wZG93biBjb21wb25lbnQgb24gYSBwYWdlIGNyZWF0ZXMgaW5zdGFuY2Ugb2YgDQogICAgKiBbIkZhY2V0U3VtbWFyeU1vZGVsIl17QGxpbmsgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlNb2RlbH0gYW5kIA0KICAgICogWyJGYWNldFN1bW1hcnlWaWV3Il17QGxpbmsgbW9kdWxlOmZhY2V0U3VtbWFyeS5GYWNldFN1bW1hcnlWaWV3fSANCiAgICAqIEBtZW1iZXJPZiBtb2R1bGU6ZmFjZXRTdW1tYXJ5DQogICAgKiBAYWxpYXMgbW9kdWxlOmZhY2V0U3VtbWFyeS5pbml0DQogICAgKi8NCiAgICBhcGkuaW5pdCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgaWYgKCQoImJvZHkiKS5oYXNDbGFzcygib24tcGFnZS1lZGl0b3IiKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgcXVlcnlNb2RlbCA9IFhBLmNvbXBvbmVudC5zZWFyY2gucXVlcnk7DQogICAgICAgIGFwaU1vZGVsID0gWEEuY29tcG9uZW50LnNlYXJjaC5hamF4Ow0KICAgICAgICB1cmxIZWxwZXJNb2RlbCA9IFhBLmNvbXBvbmVudC5zZWFyY2gudXJsOw0KDQogICAgICAgIHZhciBmYWNldFN1bW1hcnkgPSAkKCIuZmFjZXQtc3VtbWFyeTpub3QoLmluaXRpYWxpemVkKSIpOyAgICAgIA0KDQogICAgICAgIF8uZWFjaChmYWNldFN1bW1hcnksIGZ1bmN0aW9uIChlbGVtKSB7DQogICAgICAgICAgICB2YXIgJGVsID0gJChlbGVtKSwNCiAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBGYWNldFN1bW1hcnlNb2RlbCgpLA0KICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgRmFjZXRTdW1tYXJ5Vmlldyh7IGVsOiAkZWwsIG1vZGVsOiBtb2RlbCB9KTsNCg0KICAgICAgICAgICAgJGVsLmFkZENsYXNzKCJpbml0aWFsaXplZCIpOw0KICAgICAgICB9KTsNCiAgICB9Ow0KDQogICAgcmV0dXJuIGFwaTsNCg0KfShqUXVlcnksIGRvY3VtZW50KSk7DQoNClhBLnJlZ2lzdGVyKCdmYWNldFN1bW1hcnknLCBYQS5jb21wb25lbnQuc2VhcmNoLmZhY2V0LnN1bW1hcnkpOw==
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 16927
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "ba3f86a2-4a1c-4d78-b63d-91c2779c1b5e"
  Hint: __Sortorder
  Value: 550
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20190521T081228Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\admin
