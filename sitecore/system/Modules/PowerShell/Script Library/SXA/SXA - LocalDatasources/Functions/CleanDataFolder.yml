---
ID: "ca674b2e-cc2b-40f8-9102-7372b564ab0c"
Parent: "79ab4784-20f9-4280-b08e-43ac997a817b"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/SXA/SXA - LocalDatasources/Functions/CleanDataFolder"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Import-Function Test-ItemIsPageData
    Import-Function Test-ItemIsPage
    Import-Function Get-DataSourcesIdsFromLayout
    Import-Function Get-PresentationDetails
    Import-Function Get-RelativeDatasourcePath
    Import-Function Get-NestedDatasource
    Import-Function Get-DesignItem
    Import-Function Get-ItemByIdSafe
    
    function IsDataSourceUsedAsPageRelative {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Item]$Datasource,
    
            [Parameter(Mandatory = $false, Position = 1 )]
            [string[]]$DatasourcePaths
        )
    
        begin {
            Write-Verbose "Cmdlet IsDataSourceUsedAsPageRelative - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet IsDataSourceUsedAsPageRelative - Process"
            ($DatasourcePaths | ? { $Datasource.Paths.Path.EndsWith($_) }) -ne $null
        } 
    
        end {
            Write-Verbose "Cmdlet IsDataSourceUsedAsPageRelative - End"
        }
    }
    
    function IsDataSourceUsedAsPageRelativeOnPartialDesign {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Item]$Item,    
            [Parameter(Mandatory = $true, Position = 1 )]
            [Item]$Datasource 
        )
    
        begin {
            Write-Verbose "Cmdlet IsDataSourceUsedAsPageRelativeOnPartialDesign - Begin"
         
        }
    
        process {
            Write-Verbose "Cmdlet IsDataSourceUsedAsPageRelativeOnPartialDesign - Process"
            $dsFromPartials = @()
            $pageDesign = Get-DesignItem $Item
            if ($pageDesign) {
                $partials = $pageDesign.PartialDesigns.Split('|') | ? { [guid]::TryParse($_, [ref][guid]::Empty) } | % { Get-ItemByIdSafe $_ }
                $partials | % {
                    $dataFolder = $_.Children | ? { Test-ItemIsPageData $_ } | Select-Object -First 1
                    if ($dataFolder) {
                        Write-Verbose "Found a data folder"                
                        $dataItems = $dataFolder.Axes.GetDescendants()
                        if($dataItems){
                            $dataFolder.Axes.GetDescendants().Paths.Path.Replace($_.Paths.Path, [string]::Empty) | % { $dsFromPartials += $_ }
                        }                    
                    }
                    Get-RelativeDatasourcePath $_ | % { $dsFromPartials += $_ }
                }
                $dsFromPartials.Contains($Datasource.Paths.Path.Replace($Item.Paths.Path, [string]::Empty))
            }
            else {
                $false
            }
            
        } 
    
        end {
            Write-Verbose "Cmdlet IsDataSourceUsedAsPageRelativeOnPartialDesign - End"
        }
    }
    
    function IsDataSourceUsedAsGlobal {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Item]$Datasource
        )
    
        begin {
            Write-Verbose "Cmdlet IsDataSourceUsedAsGlobal - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet IsDataSourceUsedAsGlobal - Process"
            $referrers = [Sitecore.Globals]::LinkDatabase.GetReferrers($Datasource) | % { $_.GetSourceItem() }
            $referrers.length -ne 0
        } 
    
        end {
            Write-Verbose "Cmdlet IsDataSourceUsedAsGlobal - End"
        }
    }
    
    function IsDataSourceUsedAsGlobalOnCurrentPage {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Item]$Datasource,
    
            [Parameter(Mandatory = $false, Position = 1 )]
            [string[]]$DataSourcesIds		
        )
    
        begin {
            Write-Verbose "Cmdlet IsDataSourceUsedAsGlobalOnCurrentPage - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet IsDataSourceUsedAsGlobalOnCurrentPage - Process"
            $DataSourcesIds -contains $Datasource.Id
        } 
    
        end {
            Write-Verbose "Cmdlet IsDataSourceUsedAsGlobalOnCurrentPage - End"
        }
    }
    
    function Remove-UnusedDatasources {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Item]$Item
        )
    
        begin {
            Write-Verbose "Cmdlet Remove-UnusedDatasources - Begin"
        }
    
        process {
            Write-Host "Cleaning following item's data folder " $item.Paths.Path
            $dataFolder = Get-ChildItem -Path $item.Paths.Path | ? { Test-ItemIsPageData $_ }
            if ($dataFolder -ne $null) {
                [Item[]]$dataSources = Get-NestedDatasource $dataFolder
    			
                $dataSourcesPaths = Get-Item -Path $item.Paths.Path -Language * | % { Get-RelativeDatasourcePath $_ }
                $dataSourcesIds = Get-Item -Path $item.Paths.Path -Language * | % { Get-DataSourcesIdsFromLayout $_ }
    			
                foreach ($datasource in $dataSources) {
                    $usedAsPageRelative = IsDataSourceUsedAsPageRelative $datasource $dataSourcesPaths
                    if ($usedAsPageRelative) {
                        continue
                    }
                    $usedAsGlobal = IsDataSourceUsedAsGlobal $datasource
                    if ($usedAsGlobal) {
                        continue
                    }
                    $usedAsGlobalOnCurrentPage = IsDataSourceUsedAsGlobalOnCurrentPage $datasource $dataSourcesIds
                    if ($usedAsGlobalOnCurrentPage) {
                        continue
                    }
                    $usedAsPageRelativeOnPartial = IsDataSourceUsedAsPageRelativeOnPartialDesign $item $datasource
                    if ($usedAsPageRelativeOnPartial) {
                        continue
                    }
                    Write-Host "Following unused item will be recycled " $datasource.Paths.Path
                    $datasource.Recycle() > $null
                }    
            }
        } 
    
        end {
            Write-Verbose "Cmdlet Remove-UnusedDatasources - End"
        }
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20160707T104611Z
