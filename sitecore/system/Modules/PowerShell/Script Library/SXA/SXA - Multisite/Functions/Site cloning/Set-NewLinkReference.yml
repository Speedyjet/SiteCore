---
ID: "2448f5ce-4c60-4b43-bba4-0dcd49d5b0f8"
Parent: "bb8a3f2e-b5ad-48ed-a083-0eb106301da7"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/SXA/SXA - Multisite/Functions/Site cloning/Set-NewLinkReference"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    function Set-NewLinkReference {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0)]
            [Item]$SourceSite,
    
            [Parameter(Mandatory = $true, Position = 1)]
            [Item]$DestinationSite,
    
            [Parameter(Mandatory = $false, Position = 2)]
            [string]$SourcePath,
    
            [Parameter(Mandatory = $false, Position = 3)]
            [string]$DestinationPath
        )
    
        begin {
            Write-Verbose "Cmdlet Set-NewLinkReference - Begin"
            $IdRegex = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|((?<=link.aspx\?_id=)[0-9a-fA-F]{32})"
        }
    
        process {
            Write-Verbose "Cmdlet Set-NewLinkReference - Process"
    
            if ($SourcePath -eq "") {
                $SourcePath = $SourceSite.Paths.Path
            }
    
            if ($DestinationPath -eq "") {
                $DestinationPath = $DestinationSite.Paths.Path
            }
            
            $processed = New-Object System.Collections.Specialized.OrderedDictionary
            Get-ChildItem -Path $DestinationSite.Paths.Path -Recurse -Language * |  ForEach-Object {
                $currentItem = $_
                $_.Fields.ReadAll()
    
                $fieldsWithIds = $_.Fields | ? { [regex]::IsMatch($_.Value, $IdRegex) }
    
                foreach ($field in $fieldsWithIds) {
                    $IDs = [regex]::Matches($field.Value, $IdRegex)
    
                    foreach ($idMatch in $IDs) {
                        $id = New-Object -TypeName "Sitecore.Data.ID" -ArgumentList $idMatch
                        $linkedItem = $currentItem.Database.GetItem($id)
                        if ($linkedItem -ne $null) {
                            if ($linkedItem.Paths.Path.StartsWith($SourcePath) -eq $true) {
                                $linkedItemPath = $linkedItem.Paths.Path + "/"
                                $SourcePath = If ($SourcePath.EndsWith("/") ) { $SourcePath } Else { $SourcePath + "/" }
                                $DestinationPath = If ($DestinationPath.EndsWith("/") ) { $DestinationPath } Else { $DestinationPath + "/" }
                                $desiredItemPath = $linkedItemPath.Replace($SourcePath, $DestinationPath)
                                $key = "$($currentItem.ID)$($id)$($desiredItemPath)$($field.Name)[$($currentItem.Language.Name)]"
                                if ($processed.Contains($key)) {
                                    continue
                                }
                                $desiredItem = $currentItem.Database.GetItem($desiredItemPath)
    
                                if ($desiredItem -ne $null) {
                                    Write-Verbose "Replacing ID from: $($id) to: $($desiredItem.ID) for $($field.Name) field [$($currentItem.Language.Name)]"
                                    $fieldValue = $currentItem."$($field.Name)";
                                    if ($idMatch.Value.Contains("-")) {
                                        $guidFormat = "D"
                                    }else {
                                        $guidFormat = "N"
                                    }
                                    $oldValue = $id.Guid.ToString($guidFormat).ToUpper()
                                    $newValue = $desiredItem.ID.Guid.ToString($guidFormat).ToUpper()
                                    $updatedFieldValue = [System.Text.RegularExpressions.Regex]::Replace($fieldValue, $oldValue, $newValue, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
                                    $currentItem."$($field.Name)" = $updatedFieldValue
                                    $processed.Add($key, 0)
                                }
                                else {
                                    Write-Verbose "Could not resolve desired item for path: $($desireItemdPath)"
                                }
                            }
                        }
                    }
                }
    
                $fieldsWithPaths = $_.Fields | ? { [regex]::IsMatch($_.Value, $SourcePath) }
                foreach ($field in $fieldsWithPaths) {
                    Write-Verbose "Replacing path from: '$SourcePath' to: '$DestinationPath' for $($field.Name) field"
                    $currentItem."$($field.Name)" = $currentItem."$($field.Name)".Replace($SourcePath, $DestinationPath)
                }            
            }
        }
    
        end {
            Write-Verbose "Cmdlet Set-NewLinkReference - End"
        }
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20170529T083300Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Admin
